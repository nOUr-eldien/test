#!/bin/bash

# Define rclone Config use init_rclone flags
init_rclone=true
mkdir -p ~/.config/rclone
echo "$rclone_config" > ~/.config/rclone/rclone.conf

cat ~/.config/rclone/rclone.conf

cd /tmp/rom # Depends on where source got synced
# lets remove unnecessary things, so that no storage issue can occur

# Normal build steps
dummy=false # use true for dummy build / use false to final build
ROM_NAME=Fluid
BRANCH_MANIFEST=$BRANCH
DEVICE=ysl
target_command="bacon"
BUILDLOG="out/target/product/ysl/ancient_ci.log"
. build/envsetup.sh
lunch ancient_ysl-user
export KBUILD_BUILD_USER=hats-project
export KBUILD_BUILD_HOST=hats-ci
export JAVA_TOOL_OPTIONS=-Xmx8g
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 100G
ccache -o compression=true
ccache -z

# stuffs
function startTele() {
	    sendInfo \
	        "<b>====== Starting Build ROM ======</b>" \
		"<b>ROM Name      :</b> <code>${ROM_NAME}</code>" \
		"<b>Branch        :</b> <code>${BRANCH_MANIFEST}</code>" \
		"<b>Device        :</b> <code>${DEVICE}</code>" \
		"<b>Command       :</b> <code>${target_command}</code>" \
		"<b>Started at    :</b> <code> $(uname -a)</code>" \
		"<b>Instance Uptime :</b> <code> $(uptime -p)</code>" \
		"<b>====== Starting Build ROM ======</b>"
}

function statusBuild() {
    if [[ $retVal -ne 0 ]]; then
        sendInfo \
	"<b>====== Build ROM Failed ======</b>" \
		"<b>ROM Name      :</b> <code>${ROM_NAME}</code>" \
		"<b>Branch        :</b> <code>${BRANCH_MANIFEST}</code>" \
		"<b>Device        :</b> <code>${DEVICE}</code>" \
		"<b>Command       :</b> <code>${target_command}</code>" \
		"<b>Please Check Cirrus CI for Build Log Failed" \
    "<b>====== Build ROM Failed ======</b>"
        sendLog "$BUILDLOG"
        exit $retVal
    fi
	if [[ $retVal -eq 20 ]]; then
            sendInfo \
	"<b>====== Build ROM Failed ======</b>" \
		"<b>ROM Name      :</b> <code>${ROM_NAME}</code>" \
		"<b>Branch        :</b> <code>${BRANCH_MANIFEST}</code>" \
		"<b>Device        :</b> <code>${DEVICE}</code>" \
		"<b>Command       :</b> <code>${target_command}</code>" \
		"<b>Build Paused and Uploading ccache for a moment" \
    "<b>====== Build ROM Failed ======</b>"
        sendLog "$BUILDLOG"
        exit $retVal
    fi
    PATHJSON=$(find $OUT -name "$ROM_NAME*.json")
    sendTele "$PATHJSON"
    sendInfo \
    "<b>====== Build ROM Completed ======</b>" \
		"<b>ROM Name      :</b> <code>${ROM_NAME}</code>" \
		"<b>Branch        :</b> <code>${BRANCH_MANIFEST}</code>" \
		"<b>Device        :</b> <code>${DEVICE}</code>" \
		"<b>Command       :</b> <code>${target_command}</code>" \
		"<b>Started at    :</b> <code> $(uname -a)</code>" \
		"<b>Instance Uptime :</b> <code> $(uptime -p)</code>" \
		"Link File : $send_zip" \
    "<b>====== Build ROM Completed ======</b>"
}

function sendInfo() {
	curl -s -X POST https://api.telegram.org/bot$BOT/sendMessage -d chat_id=$CHAT -d "parse_mode=HTML" -d text="$(
		for POST in "${@}"; do
			echo "${POST}"
		done
	)" &> /dev/null
}

function sendLog() {
	curl -F chat_id=$CHAT -F document=@"$1" https://api.telegram.org/bot$BOT/sendDocument &>/dev/null
}

function sendTele() {
	curl -F chat_id=$CHAT -F document=@"$1" https://api.telegram.org/bot$BOT/sendDocument &>/dev/null
}

up(){
	curl --upload-file $1 https://transfer.sh/ ; echo
	# 14 days, 10 GB limit
}

make_metalava(){
	make api-stubs-docs
	make system-api-stubs-docs
	make test-api-stubs-docs
}

make_rom(){
		startTele
		mkfifo reading
		tee "${BUILDLOG}" < reading & make bacon -j8 > reading
		if [ -f out/target/product/ysl/*zip ]; then
			send_zip=$(up out/target/product/ysl/*zip)
			# Record exit code after build
			retVal=$?
			statusBuild
			sendLog "$BUILDLOG"
		else
			# Record exit code after build
			retVal=$?
			statusBuild
			endLog "$BUILDLOG"
		fi
}

if [ "$dummy" == "true" ]; then
	make_metalava
	make_rom & sleep 4140 && kill "$!" #this is a 1:20 hours timeout
else
	make_metalava
	make_rom
fi
